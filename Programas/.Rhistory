library(RODBC)
library(tidyverse)
library(fabletools)
library(tsibble)
library(fpp3)
library(tictoc)
#save.image(file = "Lucky.RData")
load("Lucky.RData")
models.forecast[4] %>% report()
models.forecast %>% augment() %>% features(.innov, box_pierce, lag = 10) #Residuales no autocorrelacionados
models.forecast %>% augment() %>% features(.innov, ljung_box, lag = 10) #Residuales no autocorrelacionados
models.forecast %>% augment()
gg_tsresiduals(models.forecast[1])
gg_tsresiduals(models.forecast[2])
accuracy(models.forecast)
accuracy(test.f[[1]],ts.total.test)
accuracy(test.f[[1]],ts.total.test)
accuracy(test.f[[2]],ts.total.test)
accuracy(test.f[[2]],ts.total.test)
install.packages(c("BH", "callr", "commonmark", "data.table", "DBI", "digest", "distributional", "fabletools", "fracdiff", "ggplot2", "glue", "gplots", "hardhat", "httpuv", "listenv", "parallelly", "ps", "quantmod", "Rcpp", "RcppArmadillo", "readr", "recipes", "renv", "reprex", "rlang", "rsconnect", "rvest", "shape", "tidyr", "timechange", "tsibble", "uuid", "withr", "writexl", "xfun", "xts", "zip"))
install.packages("writexl")
library(RODBC)
library(tidyverse)
library(fabletools)
library(tsibble)
library(fpp3)
library(tictoc)
#save.image(file = "Lucky.RData")
load("Lucky.RData")
autoplot(trend.total)
autoplot(trend.linea)
autoplot(trend.total)
autoplot(trend.linea)
fc.total.final %>%
tibble() %>%
transmute(Mes,
Desplazamientos = .mean,
data = "Forecast") %>%
bind_rows(ts.total[,c(1,3)]) %>%
mutate(Mes = as.Date(Mes),
data = ifelse(is.na(data),"Original",data)) %>%
arrange(Mes) %>%
ggplot() +
geom_line(aes(Mes,Desplazamientos, col = data),linewidth = 1.1) +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y",
limits = c(ymd("2021-08-01"),ymd("2023-03-01"))) +
scale_y_continuous(limits = c(60000,98000)) +
labs(title = "Forecast Total") +
xlab("Mes-Año") +
theme(axis.text.x = element_text(angle=90, size =10),
axis.text.y = element_text(size = 10))
forecast.test$Cocina %>%
tibble() %>%
select(Mes,LINEA,.model,.mean) %>%
rename(Model = .model,
Desplazamientos = .mean) %>%
bind_rows(ts.linea %>% tibble() %>% transmute(Mes,LINEA,Model = "Original", Desplazamientos)) %>%
filter(LINEA == "Cocina") %>%
mutate(Mes = as.Date(Mes)) %>%
ggplot() +
geom_line(aes(Mes,Desplazamientos,col = Model),linewidth = 1.1) +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y",
limits = c(ymd("2021-01-01"),ymd("2022-8-01")))
forecast.test$Electrodoméstico %>%
tibble() %>%
select(Mes,LINEA,.model,.mean) %>%
rename(Model = .model,
Desplazamientos = .mean) %>%
bind_rows(ts.linea %>% tibble() %>% transmute(Mes,LINEA,Model = "Original", Desplazamientos)) %>%
filter(LINEA == "Electrodoméstico") %>%
mutate(Mes = as.Date(Mes)) %>%
ggplot() +
geom_line(aes(Mes,Desplazamientos,col = Model),linewidth = 1.1) +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y",
limits = c(ymd("2021-01-01"),ymd("2022-8-01")))
#Gráficos
forecast.test <- list(
"Cocina" = models.forecast.linea$Cocina %>% forecast(new_data = ts.linea.test),
"Electrodoméstico" = models.forecast.linea$Electrodoméstico %>% forecast(new_data = ts.linea.test),
"Maquillaje" = models.forecast.linea$Maquillaje %>% forecast(new_data = ts.linea.test)
)
forecast.test$Cocina %>%
tibble() %>%
select(Mes,LINEA,.model,.mean) %>%
rename(Model = .model,
Desplazamientos = .mean) %>%
bind_rows(ts.linea %>% tibble() %>% transmute(Mes,LINEA,Model = "Original", Desplazamientos)) %>%
filter(LINEA == "Cocina") %>%
mutate(Mes = as.Date(Mes)) %>%
ggplot() +
geom_line(aes(Mes,Desplazamientos,col = Model),linewidth = 1.1) +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y",
limits = c(ymd("2021-01-01"),ymd("2022-8-01")))
ts.plot <- tibble("Mes" = rep(test.f$auto.arima$Mes,4),
"Desplazamientos" = c(test.f$auto.arima$.mean,test.f$arima$.mean,test.f$ETS$.mean,test.f$linear$.mean),
"Model" = rep(c("auto.arima","arima","ETS","linear"),times = 1, each = 5))
bind_rows(tibble(ts.total[,c("Mes","Desplazamientos")]), tibble(ts.plot)) %>%
mutate(Model = ifelse(is.na(Model),"Original",Model),
Mes = as.Date(Mes)) %>%
ggplot() +
geom_line(aes(Mes,Desplazamientos,col = Model),linewidth = 1.1) +
scale_x_date(date_breaks = "1 month", date_labels = "%b %y",
limits = c(ymd("2021-08-01"),ymd("2022-08-01"))) +
scale_y_continuous(limits = c(60000,90000)) +
labs(title = "Forecast Modelos") +
xlab("Mes-Año") +
theme(axis.text.x = element_text(angle=90, size =10),
axis.text.y = element_text(size = 10))
ts.linea %>%
filter(LINEA == "Cocina") %>%
autoplot(Desplazamientos) +
autolayer(filter(fc.linea.final,LINEA == "Cocina"))
ts.linea %>%
filter(LINEA != "Cocina") %>%
autoplot(Desplazamientos) +
autolayer(filter(fc.linea.final,LINEA != "Cocina"))
#Forecast final para lineas
model.linea.final <- ts.linea %>%
model("ETS" = ETS(Desplazamientos ~ error() + trend() + season() ) )
fc.linea.final <- forecast(model.linea.final, h = 5,
bootstrap = TRUE,
times = 5000)
ts.linea %>%
filter(LINEA != "Cocina") %>%
autoplot(Desplazamientos) +
autolayer(filter(fc.linea.final,LINEA != "Cocina"))
ts.linea %>%
filter(LINEA == "Cocina") %>%
autoplot(Desplazamientos) +
autolayer(filter(fc.linea.final,LINEA == "Cocina"))
ts.linea %>%
filter(LINEA == "Cocina") %>%
autoplot(Desplazamientos) +
autolayer(filter(fc.linea.final,LINEA == "Cocina")) +
labs(title = "Forecast ETS Linea Cocina")
library(RODBC)
library(tidyverse)
library(fabletools)
library(tsibble)
library(fpp3)
library(tictoc)
